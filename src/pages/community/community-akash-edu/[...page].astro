---
import EduCard from "@/components/community-pages/edu-card.astro";
import MobileNav from "@/components/community-pages/mobile-nav";
import { nav } from "@/components/community-pages/nav-config.ts";
import SearchDialog from "@/components/community-pages/search-dialog";
import SideNav from "@/components/community-pages/side-nav.astro";
import Pagination from "@/components/pagination.astro";
import Tag from "@/components/ui/tag2.astro";
import Layout from "@/layouts/layout.astro";
import { proseClasses } from "@/lib/prose-classes";
import type { PaginateFunction } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";
type Project = CollectionEntry<"Community_Akash_Edu_Page">;

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const projects = (await getCollection("Community_Akash_Edu_Page")).sort(
    (a, b) => {
      const dateA = new Date(a.data.pubDate);
      const dateB = new Date(b.data.pubDate);

      return dateB.getTime() - dateA.getTime();
    },
  );

  const tags: string[] = [];

  projects.forEach((project) => {
    // Loop through the tags in each blog post
    project.data.tags.forEach((tag) => {
      // Capitalize the first letter of the tag
      const lowerCasedTag = tag.toLowerCase();
      // Check if the tag is not already in the allTags array
      if (!tags.includes(lowerCasedTag)) {
        // Add the tag to the allTags array
        tags.push(lowerCasedTag);
      }
    });
  });

  return paginate(projects, {
    props: { tags: tags },
    pageSize: 9,
  });
}

// All paginated data is passed on the "page" prop
const { page, tags } = Astro.props;
const astroUrl = Astro.url;

function findPrevAndNextPages(nav: any, pathname: any) {
  // Find the index of the current page in the nav array
  const currentIndex = nav.findIndex((item: any) => item.link === pathname);

  // Calculate the index of the previous and next pages
  const prevIndex = currentIndex - 1;
  const nextIndex = currentIndex + 1;

  // Determine the previous and next pages
  const prevPage = prevIndex >= 0 ? nav[prevIndex] : null;
  const nextPage = nextIndex < nav.length ? nav[nextIndex] : null;

  return { prevPage, nextPage };
}

const pathname = new URL(Astro.request.url).pathname;

const communityPage = await Astro.glob(
  "../../../content/Community_Page/_community-akash-edu/*.mdx",
);

const PageContent = communityPage[0].Content;
const pageFrontMatter = communityPage[0].frontmatter;

const pageName = pathname
  .split("/")[2]
  .split("-")
  .map((word: any) => word.charAt(0).toUpperCase() + word.slice(1))
  .join(" ");

const link =
  "https://github.com/akash-network/website-revamp/tree/main/src/content/Community_Page/_community-akash-edu/index.mdx";
---

<Layout title="Akash EDU" image="/meta-images/community.png">
  <article class={proseClasses}>
    <PageContent />
  </article>
</Layout>
