---
import ProjectCard from "@/components/ecosystem-pages/project-card.astro";
import SortDropDown from "@/components/ecosystem-pages/sort-dropdown";
import TagsSortDropDown from "@/components/ecosystem-pages/tags-sort-dropdown";
import Pagination from "@/components/pagination.astro";
import Layout from "@/layouts/layout.astro";
import type { PaginateFunction } from "astro";
import { getCollection, type CollectionEntry } from "astro:content";

import Categories from "@/components/ecosystem-pages/categories.astro";
import TopHeader from "@/components/ecosystem-pages/top-header.astro";
import TopMargin from "@/components/ui/top-margin.astro";
type Project = CollectionEntry<"Ecosystem_Page">;

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const projects = (await getCollection("Ecosystem_Page"))
    .filter((project) => project.data.showcase === true)
    .sort((a, b) => {
      const dateA = new Date(a.data.pubDate);
      const dateB = new Date(b.data.pubDate);

      return dateB.getTime() - dateA.getTime();
    });

  const tags: string[] = [];

  projects.forEach((project) => {
    project.data.tags.forEach((tag: string) => {
      const lowerCasedTag = tag.toLowerCase();

      if (!tags.includes(lowerCasedTag)) {
        tags.push(lowerCasedTag);
      }
    });
  });

  return tags.flatMap((tag) => {
    const lowercasedTag = tag.toLowerCase();

    const filteredPosts = projects.filter((post) =>
      post.data.tags.some((tag: string) => tag.toLowerCase() === lowercasedTag),
    );

    return paginate(filteredPosts, {
      params: { tag },
      pageSize: 12,
      props: { currentTag: tag, tags: tags },
    });
  });
}

const { page, currentTag, tags } = Astro.props;

const astroUrl = Astro.url;
const pathName = astroUrl.pathname.split("/");

const formattedTag = currentTag.charAt(0).toUpperCase() + currentTag.slice(1);
---

<Layout
  title={`${formattedTag} | Showcase `}
  image="/meta-images/ecosystem.png"
>
  <TopMargin>
    <TopHeader />
  </TopMargin>

  <div
    class="container mt-10 flex justify-between lg:gap-x-[20px] xl:gap-x-[48px]"
  >
    <Categories tags={tags} />

    <div>
      <div class="flex items-center justify-between">
        <h3
          class="text-xl font-bold capitalize leading-[28px] md:text-2xl md:leading-[48px] lg:text-2lg"
        >
          {
            currentTag === "ai & ml"
              ? "AI & ML"
              : currentTag.charAt(0).toUpperCase() + currentTag.slice(1)
          }
        </h3>

        <div>
          {
            astroUrl.pathname.split("/")[3] === "latest" ||
            astroUrl.pathname.split("/")[3] === "oldest" ? (
              <SortDropDown client:load currentPath={astroUrl.pathname} />
            ) : (
              <TagsSortDropDown client:load currentPath={astroUrl.pathname} />
            )
          }
        </div>
      </div>

      <div
        class="mt-4 grid flex-shrink-0 grid-cols-1 gap-y-[24px] sm:grid-cols-2 sm:gap-x-8 md:gap-y-8 lg:grid-cols-3 lg:gap-x-[36px] lg:gap-y-[32px]"
      >
        {
          page.data.map((project: Project, i: number) => {
            return (
              <ProjectCard
                title={project.data.projectTitle}
                description={project.data.description}
                image={project.data.projectImage}
                button={project.data.ctaButton}
                githubLink={project.data.githubLink}
                twitterLink={project.data.twitterLink}
                websiteLink={project.data.websiteLink}
                discordLink={project.data.discordLink}
              />
            );
          })
        }
      </div>

      <Pagination page={page} />
    </div>
  </div>
</Layout>
